# coding: utf-8

"""
    Developer API

    At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sqala_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sqala_python_sdk.api_response import AsyncGeneratorResponse
from sqala_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sqala_python_sdk import schemas  # noqa: F401

from sqala_python_sdk.model.qr_code_generate_qr_code_request_payer import QrCodeGenerateQrCodeRequestPayer as QrCodeGenerateQrCodeRequestPayerSchema
from sqala_python_sdk.model.qr_code_generate_qr_code_response import QrCodeGenerateQrCodeResponse as QrCodeGenerateQrCodeResponseSchema
from sqala_python_sdk.model.qr_code_generate_qr_code400_response import QrCodeGenerateQrCode400Response as QrCodeGenerateQrCode400ResponseSchema
from sqala_python_sdk.model.qr_code_generate_qr_code_request import QrCodeGenerateQrCodeRequest as QrCodeGenerateQrCodeRequestSchema
from sqala_python_sdk.model.qr_code_generate_qr_code_request_metadata import QrCodeGenerateQrCodeRequestMetadata as QrCodeGenerateQrCodeRequestMetadataSchema
from sqala_python_sdk.model.qr_code_generate_qr_code_request_split import QrCodeGenerateQrCodeRequestSplit as QrCodeGenerateQrCodeRequestSplitSchema

from sqala_python_sdk.type.qr_code_generate_qr_code_request_metadata import QrCodeGenerateQrCodeRequestMetadata
from sqala_python_sdk.type.qr_code_generate_qr_code_request_split import QrCodeGenerateQrCodeRequestSplit
from sqala_python_sdk.type.qr_code_generate_qr_code_request import QrCodeGenerateQrCodeRequest
from sqala_python_sdk.type.qr_code_generate_qr_code_response import QrCodeGenerateQrCodeResponse
from sqala_python_sdk.type.qr_code_generate_qr_code_request_payer import QrCodeGenerateQrCodeRequestPayer
from sqala_python_sdk.type.qr_code_generate_qr_code400_response import QrCodeGenerateQrCode400Response

from ...api_client import Dictionary
from sqala_python_sdk.pydantic.qr_code_generate_qr_code_request_payer import QrCodeGenerateQrCodeRequestPayer as QrCodeGenerateQrCodeRequestPayerPydantic
from sqala_python_sdk.pydantic.qr_code_generate_qr_code_response import QrCodeGenerateQrCodeResponse as QrCodeGenerateQrCodeResponsePydantic
from sqala_python_sdk.pydantic.qr_code_generate_qr_code_request_split import QrCodeGenerateQrCodeRequestSplit as QrCodeGenerateQrCodeRequestSplitPydantic
from sqala_python_sdk.pydantic.qr_code_generate_qr_code400_response import QrCodeGenerateQrCode400Response as QrCodeGenerateQrCode400ResponsePydantic
from sqala_python_sdk.pydantic.qr_code_generate_qr_code_request_metadata import QrCodeGenerateQrCodeRequestMetadata as QrCodeGenerateQrCodeRequestMetadataPydantic
from sqala_python_sdk.pydantic.qr_code_generate_qr_code_request import QrCodeGenerateQrCodeRequest as QrCodeGenerateQrCodeRequestPydantic

# body param
SchemaForRequestBodyApplicationJson = QrCodeGenerateQrCodeRequestSchema


request_body_qr_code_generate_qr_code_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = QrCodeGenerateQrCodeResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: QrCodeGenerateQrCodeResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: QrCodeGenerateQrCodeResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = QrCodeGenerateQrCode400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: QrCodeGenerateQrCode400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: QrCodeGenerateQrCode400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _generate_qr_code_mapped_args(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if code is not None:
            _body["code"] = code
        if amount is not None:
            _body["amount"] = amount
        if payer is not None:
            _body["payer"] = payer
        if split is not None:
            _body["split"] = split
        if metadata is not None:
            _body["metadata"] = metadata
        args.body = _body
        return args

    async def _agenerate_qr_code_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create a Pix QR Code
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pix-qrcode-payments',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_qr_code_generate_qr_code_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _generate_qr_code_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create a Pix QR Code
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pix-qrcode-payments',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_qr_code_generate_qr_code_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GenerateQrCodeRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def agenerate_qr_code(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_qr_code_mapped_args(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
        )
        return await self._agenerate_qr_code_oapg(
            body=args.body,
            **kwargs,
        )
    
    def generate_qr_code(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_qr_code_mapped_args(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
        )
        return self._generate_qr_code_oapg(
            body=args.body,
        )

class GenerateQrCode(BaseApi):

    async def agenerate_qr_code(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
        validate: bool = False,
        **kwargs,
    ) -> QrCodeGenerateQrCodeResponsePydantic:
        raw_response = await self.raw.agenerate_qr_code(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
            **kwargs,
        )
        if validate:
            return QrCodeGenerateQrCodeResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(QrCodeGenerateQrCodeResponsePydantic, raw_response.body)
    
    
    def generate_qr_code(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
        validate: bool = False,
    ) -> QrCodeGenerateQrCodeResponsePydantic:
        raw_response = self.raw.generate_qr_code(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
        )
        if validate:
            return QrCodeGenerateQrCodeResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(QrCodeGenerateQrCodeResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._generate_qr_code_mapped_args(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
        )
        return await self._agenerate_qr_code_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        amount: int,
        code: typing.Optional[str] = None,
        payer: typing.Optional[QrCodeGenerateQrCodeRequestPayer] = None,
        split: typing.Optional[QrCodeGenerateQrCodeRequestSplit] = None,
        metadata: typing.Optional[QrCodeGenerateQrCodeRequestMetadata] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._generate_qr_code_mapped_args(
            amount=amount,
            code=code,
            payer=payer,
            split=split,
            metadata=metadata,
        )
        return self._generate_qr_code_oapg(
            body=args.body,
        )

