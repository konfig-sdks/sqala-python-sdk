# coding: utf-8

"""
    Developer API

    At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from sqala_python_sdk.pydantic.qr_code_get_qr_code_by_id_response_metadata import QrCodeGetQrCodeByIdResponseMetadata
from sqala_python_sdk.pydantic.qr_code_get_qr_code_by_id_response_payer import QrCodeGetQrCodeByIdResponsePayer
from sqala_python_sdk.pydantic.qr_code_get_qr_code_by_id_response_split import QrCodeGetQrCodeByIdResponseSplit

class QrCodeGetQrCodeByIdResponse(BaseModel):
    id: typing.Optional[str] = Field(None, alias='id')

    code: typing.Optional[str] = Field(None, alias='code')

    type: typing.Optional[str] = Field(None, alias='type')

    amount: typing.Optional[int] = Field(None, alias='amount')

    paid_amount: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='paidAmount')

    payload: typing.Optional[str] = Field(None, alias='payload')

    payer: typing.Optional[QrCodeGetQrCodeByIdResponsePayer] = Field(None, alias='payer')

    split: typing.Optional[QrCodeGetQrCodeByIdResponseSplit] = Field(None, alias='split')

    status: typing.Optional[str] = Field(None, alias='status')

    created_at: typing.Optional[str] = Field(None, alias='createdAt')

    processed_at: typing.Optional[str] = Field(None, alias='processedAt')

    paid_at: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='paidAt')

    failed_at: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='failedAt')

    metadata: typing.Optional[QrCodeGetQrCodeByIdResponseMetadata] = Field(None, alias='metadata')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
